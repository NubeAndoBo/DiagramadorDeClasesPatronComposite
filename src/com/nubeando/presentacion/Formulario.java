package com.nubeando.presentacion;

import com.nubeando.modelo.TDiagrama;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import com.nubeando.modelo.TAgregacion;
import com.nubeando.modelo.TAsociacion;
import com.nubeando.modelo.TClase;
import com.nubeando.modelo.TComposicion;
import com.nubeando.modelo.TDependencia;
import com.nubeando.modelo.TEnlace;
import com.nubeando.modelo.THerencia;
import org.jgraph.graph.AttributeMap;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Formulario.java
 *
 * Created on 22/05/2011, 17:11:50
 */
/**
 *
 * @author Administrador
 */
public class Formulario extends javax.swing.JFrame {

    private TDiagrama contenedor;
    private final int COMPOSICION = 0;
    private final int AGREGACION = 1;
    private final int HERENCIA = 2;
    private final int DEPENDENCIA = 3;
    private final int ASOCIACION = 4;
    protected TClase cell_first;
    protected TClase cell_current;
    private int tipoConexion;
    private JFileChooser fileChooser;

    /** Creates new form Formulario */
    public Formulario() {
        initComponents();

        contenedor = TDiagrama.getInstancia();
        initContainer();
        getContentPane().add(contenedor.getGraph(), java.awt.BorderLayout.CENTER);
        //demo();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(d);

    }

    private void demo() {
        TClase clase = new TClase("prueba");
        clase.setNombre("Prueba");
        clase.addPort();
        contenedor.getGraph().getGraphLayoutCache().insert(clase);
        clase = new TClase("prueba");
        clase.setNombre("Prueba");
        clase.addPort();
        contenedor.getGraph().getGraphLayoutCache().insert(clase);
    }

    private void initContainer() {

        contenedor.getGraph().getModel().addGraphModelListener(new EscuchadorModel());
        //adicione
        contenedor.getGraph().setMarqueeHandler(new MyMarqueeHandler());
        //********
        contenedor.getGraph().getGraphLayoutCache().setFactory(new JComponentCellViewFactory());

    }

    public void connect(org.jgraph.graph.Port source, org.jgraph.graph.Port target) {
        TEnlace edge = createEnlace(tipoConexion, cell_first, cell_current);

        if (contenedor.getGraph().getModel().acceptsSource(edge, source)
                && contenedor.getGraph().getModel().acceptsTarget(edge, target)) {

            contenedor.getGraph().getGraphLayoutCache().insertEdge(edge, source, target);
            contenedor.getGraph().setPortsVisible(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jButton4 = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jButton8 = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        jButton13 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/new.gif"))); // NOI18N
        jButton1.setToolTipText("Nuevo");
        jButton1.setBorderPainted(false);
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/open.gif"))); // NOI18N
        jButton2.setToolTipText("Abrir");
        jButton2.setBorderPainted(false);
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/save.gif"))); // NOI18N
        jButton3.setToolTipText("Guardar");
        jButton3.setBorderPainted(false);
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jSeparator6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jToolBar1.add(jSeparator6);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/print.gif"))); // NOI18N
        jButton4.setToolTipText("Imprimir");
        jButton4.setBorderPainted(false);
        jButton4.setEnabled(false);
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton4);
        jToolBar1.add(jSeparator7);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/cut.gif"))); // NOI18N
        jButton5.setToolTipText("Cortar");
        jButton5.setBorderPainted(false);
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton5);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/copy.gif"))); // NOI18N
        jButton6.setToolTipText("Copiar");
        jButton6.setBorderPainted(false);
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton6);

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/paste.gif"))); // NOI18N
        jButton7.setToolTipText("Pegar");
        jButton7.setBorderPainted(false);
        jButton7.setFocusable(false);
        jButton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton7);
        jToolBar1.add(jSeparator8);

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/delete.gif"))); // NOI18N
        jButton8.setToolTipText("Eliminar");
        jButton8.setBorderPainted(false);
        jButton8.setFocusable(false);
        jButton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton8);
        jToolBar1.add(jSeparator9);

        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/undo.gif"))); // NOI18N
        jButton9.setToolTipText("Deshacer");
        jButton9.setBorderPainted(false);
        jButton9.setEnabled(false);
        jButton9.setFocusable(false);
        jButton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton9);

        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/redo.gif"))); // NOI18N
        jButton10.setToolTipText("Rehacer");
        jButton10.setBorderPainted(false);
        jButton10.setEnabled(false);
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton10);
        jToolBar1.add(jSeparator10);

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/nubeando/images/fit.gif"))); // NOI18N
        jButton13.setFocusable(false);
        jButton13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton13);

        jButton11.setText("Clase");
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton11);

        jButton12.setText("Asociacion");
        jButton12.setFocusable(false);
        jButton12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton12.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton12);

        jButton14.setText("Herencia");
        jButton14.setFocusable(false);
        jButton14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton14.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton14);

        jButton15.setText("Agregacion");
        jButton15.setFocusable(false);
        jButton15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton15.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton15);

        jButton17.setText("Dependencia");
        jButton17.setFocusable(false);
        jButton17.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton17.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton17);

        jButton16.setText("Composicion");
        jButton16.setFocusable(false);
        jButton16.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton16.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton16);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        if (contenedor.getGraph().isSelectionEmpty()) {
            return;
        }
        Object object = contenedor.getGraph().getSelectionCell();
        if (object instanceof TClase) {
            TClase cell = (TClase) object;
            new DialogPropiedades(this, true, cell).setVisible(true);
        } else if (object instanceof TEnlace) {
            TEnlace cell = (TEnlace) object;
            new DialogEnlace(this, true, cell).setVisible(true);
        }
    }//GEN-LAST:event_jButton13ActionPerformed
    private TClase createClase(int x, int y) {
        TClase cell = new TClase("Clase");
        cell.addPort();
        AttributeMap map = new AttributeMap();
        Rectangle rec = new Rectangle(x, y, 100, 200);
        org.jgraph.graph.GraphConstants.setBounds(map, rec);
        org.jgraph.graph.GraphConstants.setGradientColor(map, Color.white.brighter());
        org.jgraph.graph.GraphConstants.setBorderColor(map, Color.blue);
        org.jgraph.graph.GraphConstants.setBackground(map, Color.gray);
        org.jgraph.graph.GraphConstants.setSizeableAxis(map, 3);
        org.jgraph.graph.GraphConstants.setOpaque(map, true);
        org.jgraph.graph.GraphConstants.setEditable(map, false);
        cell.setAttributes(map);
        return cell;
    }

    private TEnlace createEnlace(int tipo, TClase origen, TClase destino) {
        System.out.println(tipo);
        switch (tipo) {
            case COMPOSICION:
                return new TComposicion();
            case DEPENDENCIA:
                return new TDependencia();
            case HERENCIA:
                return new THerencia();
            case AGREGACION:
                return new TAgregacion();
            default:
                return new TAsociacion();
        }

    }
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        contenedor.getGraph().getGraphLayoutCache().insert(createClase(10, 10));
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        tipoConexion = ASOCIACION;
        contenedor.getGraph().setPortsVisible(true);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        tipoConexion = HERENCIA;
        contenedor.getGraph().setPortsVisible(true);
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        tipoConexion = AGREGACION;
        contenedor.getGraph().setPortsVisible(true);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        tipoConexion = DEPENDENCIA;
        contenedor.getGraph().setPortsVisible(true);
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        tipoConexion = COMPOSICION;
        contenedor.getGraph().setPortsVisible(true);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Formulario().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    private class EscuchadorModel implements org.jgraph.event.GraphModelListener {

        @Override
        public void graphChanged(org.jgraph.event.GraphModelEvent e) {
            contenedor.getGraph().clearOffscreen();
        }
    }

    private class JComponentCellViewFactory extends org.jgraph.graph.DefaultCellViewFactory {

        @Override
        protected org.jgraph.graph.VertexView createVertexView(Object objCell) {
            org.jgraph.graph.DefaultGraphCell cell = (org.jgraph.graph.DefaultGraphCell) objCell;
            org.jgraph.graph.VertexView vertex = null;
            vertex = new TClaseView(cell);
            return vertex;
        }
    }

    public class MyMarqueeHandler extends org.jgraph.graph.BasicMarqueeHandler {

        protected java.awt.geom.Point2D start, current;
        protected org.jgraph.graph.PortView port, firstPort;

        @Override
        public boolean isForceMarqueeEvent(java.awt.event.MouseEvent e) {
            if (e.isShiftDown()) {
                return false;
            }
            if (SwingUtilities.isRightMouseButton(e)) {
                return true;
            }
            port = getSourcePortAt(e.getPoint());
            Object o = contenedor.getGraph().getFirstCellForLocation(e.getX(), e.getY());
            if (o instanceof TClase) {
                cell_current = (TClase) o;
            } else {
                return true;
            }
            if (port != null && contenedor.getGraph().isPortsVisible()) {
                return true;
            }
            return super.isForceMarqueeEvent(e);
        }

        @Override
        public void mousePressed(final java.awt.event.MouseEvent e) {
            if (SwingUtilities.isRightMouseButton(e)) {
                Object cell = contenedor.getGraph().getFirstCellForLocation(e.getX(), e.getY());
            } else if (port != null && contenedor.getGraph().isPortsVisible()) {
                start = contenedor.getGraph().toScreen(port.getLocation());
                firstPort = port;
                cell_first = cell_current;
            } else {
                super.mousePressed(e);
            }
        }

        @Override
        public void mouseDragged(java.awt.event.MouseEvent e) {
            if (start != null) {
                Graphics g = contenedor.getGraph().getGraphics();
                org.jgraph.graph.PortView newPort = getTargetPortAt(e.getPoint());
                if (newPort == null || newPort != port) {
                    paintConnector(Color.black, contenedor.getGraph().getBackground(), g);
                    port = newPort;
                    Object o = contenedor.getGraph().getFirstCellForLocation(e.getX(), e.getY());
                    if (o instanceof TClase) {
                        cell_current = (TClase) o;
                    } else {
                        super.mouseDragged(e);
                    }
                    if (port != null) {
                        current = contenedor.getGraph().toScreen(port.getLocation());
                    } else {
                        current = contenedor.getGraph().snap(e.getPoint());
                    }
                    paintConnector(contenedor.getGraph().getBackground(), Color.black, g);
                }
            }
            super.mouseDragged(e);
        }

        public org.jgraph.graph.PortView getSourcePortAt(Point2D point) {
            contenedor.getGraph().setJumpToDefaultPort(false);
            org.jgraph.graph.PortView result;
            try {
                result = contenedor.getGraph().getPortViewAt(point.getX(), point.getY());
            } finally {
                contenedor.getGraph().setJumpToDefaultPort(true);
            }
            return result;
        }

        protected org.jgraph.graph.PortView getTargetPortAt(Point2D point) {
            return contenedor.getGraph().getPortViewAt(point.getX(), point.getY());
        }

        @Override
        public void mouseReleased(java.awt.event.MouseEvent e) {
            if (e != null && port != null && firstPort != null && firstPort != port) {
                connect((org.jgraph.graph.Port) firstPort.getCell(), (org.jgraph.graph.Port) port.getCell());
                e.consume();
            } else {
                contenedor.getGraph().repaint();
            }
            firstPort = port = null;
            start = current = null;
            cell_current = cell_first = null;
            super.mouseReleased(e);
        }

        @Override
        public void mouseMoved(java.awt.event.MouseEvent e) {
            if (e != null && getSourcePortAt(e.getPoint()) != null
                    && contenedor.getGraph().isPortsVisible()) {
                contenedor.getGraph().setCursor(new Cursor(Cursor.HAND_CURSOR));
                e.consume();
            } else {
                super.mouseMoved(e);
            }
        }

        protected void paintConnector(Color fg, Color bg, Graphics g) {
            g.setColor(fg);
            g.setXORMode(bg);
            paintPort(contenedor.getGraph().getGraphics());
            if (firstPort != null && start != null && current != null) {
                g.drawLine((int) start.getX(), (int) start.getY(), (int) current.getX(), (int) current.getY());
            }
        }

        protected void paintPort(Graphics g) {
            if (port != null) {
                boolean o = (org.jgraph.graph.GraphConstants.getOffset(port.getAllAttributes()) != null);
                Rectangle2D r = (o) ? port.getBounds() : port.getParentView().getBounds();
                r = contenedor.getGraph().toScreen((Rectangle2D) r.clone());
                r.setFrame(r.getX() - 3, r.getY() - 3, r.getWidth() + 6, r.getHeight() + 6);
                contenedor.getGraph().getUI().paintCell(g, port, r, true);
            }
        }
    }
}
